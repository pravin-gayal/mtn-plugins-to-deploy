{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"react\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"lodash\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./datasource.ts","webpack:///./ConfigEditor.tsx","webpack:///./types.ts","webpack:///./QueryEditor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { ElasticsearchOptions, ElasticsearchQuery } from './types';\n\n\nexport class Elasticsearch extends DataSourceWithBackend<ElasticsearchQuery, ElasticsearchOptions> {\n  annotations = {};\n\n  constructor(instanceSettings: DataSourceInstanceSettings<ElasticsearchOptions>) {\n    super(instanceSettings);\n  }\n\n  getQueryVariables = (): Map<string, any> => {\n    const query = window.location.search.substring(1);\n    const vars = query.split('&');\n    const varsMap = new Map<string, any>();\n    for (let i = 0; i < vars.length; i++) {\n      const pair = vars[i].split('=');\n      const key = decodeURIComponent(pair[0]);\n      const val = decodeURIComponent(pair[1]);\n      varsMap.set(key, val);\n    }\n\n    return varsMap;\n  }\n\n  updateQuery = (value: string) => {\n    const varsMap = this.getQueryVariables();\n    \n    varsMap.forEach((val: any, key: string) => {\n      key = \"$\".concat(key);\n      value = value.replace(key, val);\n    });\n\n    return value;\n  }\n\n  applyTemplateVariables(query: ElasticsearchQuery) {\n    query.query = this.updateQuery(query.query);\n    const templateSrv = getTemplateSrv();\n    \n    window['templateSrv'] = templateSrv;\n    query.query = window['templateSrv'].replace(query.query, window['templateSrv'].getVariables())\n\n    return {\n      ...query,\n      templateVars: JSON.stringify(templateSrv.getVariables()),\n      urlVars: JSON.stringify(Array.from(this.getQueryVariables().entries()))\n    };\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { LegacyForms } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ElasticsearchOptions, ElasticsearchSecureData } from './types';\n\nconst { SecretFormField, FormField } = LegacyForms;\n\ninterface Props extends DataSourcePluginOptionsEditorProps<ElasticsearchOptions> {}\n\ninterface State {}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  onHostChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        host: event.target.value,\n      },\n    });\n  };\n\n  onUserChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        username: event.target.value,\n      },\n    });\n  };\n\n  // Secure field (only sent to the backend)\n  onPasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        ...options.secureJsonData,\n        password: event.target.value,\n      },\n    });\n  };\n\n  onPasswordReset = () => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        password: false,\n      },\n    });\n  };\n\n  render() {\n    const { options } = this.props;\n    const { jsonData, secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as ElasticsearchSecureData;\n\n    return (\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <FormField\n            label=\"Cluster\"\n            labelWidth={10}\n            inputWidth={20}\n            onChange={this.onHostChange}\n            value={jsonData.host || ''}\n            placeholder=\"Elasticsearch cluster address\"\n          />\n        </div>\n        <div className=\"gf-form\">\n          <FormField\n            label=\"Username\"\n            labelWidth={10}\n            inputWidth={20}\n            onChange={this.onUserChange}\n            value={jsonData.username || ''}\n            placeholder=\"Elasticsearch cluster username\"\n          />\n        </div>\n        <div className=\"gf-form\">\n          <SecretFormField\n            isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n            value={secureJsonData.password || ''}\n            label=\"Password\"\n            placeholder=\"Elasticsearch cluster password\"\n            labelWidth={10}\n            inputWidth={20}\n            onReset={this.onPasswordReset}\n            onChange={this.onPasswordChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport interface ElasticsearchQuery extends DataQuery {\n  query: string;\n  url: string\n}\n\nexport const defaultQuery: Partial<ElasticsearchQuery> = {\n  query: '',\n  url: ''\n};\n\n/**\n * These are options configured for each DataSource instance.\n */\nexport interface ElasticsearchOptions extends DataSourceJsonData {\n  host?: string;\n  username?: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface ElasticsearchSecureData {\n  password?: string;\n}\n","import React, { PureComponent } from 'react';\nimport { FieldSet, InlineFieldRow, QueryField } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { Elasticsearch } from './datasource';\nimport { ElasticsearchOptions, ElasticsearchQuery, defaultQuery } from './types';\nimport { defaults } from 'lodash';\n\ntype Props = QueryEditorProps<Elasticsearch, ElasticsearchQuery, ElasticsearchOptions>;\n\nexport class QueryEditor extends PureComponent<Props> {\n  onUrlChange = (value: string) => {\n    this.props.onChange({\n      ...this.props.query,\n      url: value,\n    });\n  };\n\n  onQueryChange = (value: string) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: value,\n    });\n  };\n\n  render() {\n    const query = defaults(this.props.query, defaultQuery);\n\n    return (\n      <FieldSet>\n        <InlineFieldRow>\n        <QueryField query={query.url} portalOrigin=\"Elasticsearch\" onChange={this.onUrlChange} />\n          <QueryField query={query.query} portalOrigin=\"Elasticsearch\" onChange={this.onQueryChange} />\n        </InlineFieldRow>\n      </FieldSet>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { Elasticsearch } from './datasource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { ElasticsearchQuery, ElasticsearchOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<Elasticsearch, ElasticsearchQuery, ElasticsearchOptions>(Elasticsearch)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__5__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","Elasticsearch","instanceSettings","vars","window","location","search","substring","split","varsMap","Map","i","length","pair","decodeURIComponent","val","set","getQueryVariables","forEach","concat","replace","query","this","updateQuery","templateSrv","getTemplateSrv","getVariables","templateVars","JSON","stringify","urlVars","Array","from","entries","DataSourceWithBackend","SecretFormField","LegacyForms","FormField","ConfigEditor","event","props","onOptionsChange","options","jsonData","host","target","username","secureJsonData","password","secureJsonFields","className","label","labelWidth","inputWidth","onChange","onHostChange","placeholder","onUserChange","isConfigured","onReset","onPasswordReset","onPasswordChange","PureComponent","defaultQuery","url","QueryEditor","defaults","FieldSet","InlineFieldRow","QueryField","portalOrigin","onUrlChange","onQueryChange","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor"],"sourceRoot":""}